# -*- coding: utf-8 -*-
"""landscape_explorer_colorization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PjaUU6558nxbsbESDsj7-jvDvNN1nBbo

# Task
Build a simple Earth Engine pipeline to pull black and white aerial imagery from the image collection "projects/wlfw-um/assets/historical-imagery/conus-west", export it as PNGs, and then use the Gemini API to colorize the imagery.

## Authenticate and initialize earth engine

### Subtask:
Set up the Earth Engine environment in Colab.

**Reasoning**:
Import the Earth Engine library, authenticate, and initialize the Earth Engine environment.
"""

import ee
ee.Authenticate()
ee.Initialize(project='cloud-geographers-internal-gee')

"""## Access Image Collection

### Subtask:
Load the specified historical aerial imagery collection.

**Reasoning**:
Load the image collection using the collection ID provided in the task description.
"""

image_collection = ee.ImageCollection("projects/wlfw-um/assets/historical-imagery/conus-west")
print("Image collection loaded successfully.")

"""## Export Imagery as PNGs

### Subtask:
Export the selected images as PNG files.

**Reasoning**:
Use the `ee.batch.Export.image.toDrive` or `ee.batch.Export.image.toCloudStorage` function to export the filtered image collection.
"""

# Define a region of interest (example: a simple rectangle)
# Replace with your desired coordinates

#lehi = ee.Geometry.Point(-111.8508, 40.3916) # Lehi, UT
mtn_view = ee.Geometry.Point(-122.084113, 37.422697)
roi = mtn_view.buffer(1000).bounds()

import io
from PIL import Image
import numpy as np

image = image_collection.mosaic().clipToBoundsAndScale(roi,scale=1)

# Define parameters for computePixels (adjust scale and region as needed)
# Using the previously defined roi for simplicity
compute_pixels_params = {
    'expression': image,
    'fileFormat': 'PNG',
}

try:
    # Use ee.data.computePixels to get image data
    png_bytes = ee.data.computePixels(compute_pixels_params)

    # You can now process the png_bytes, e.g., save to a file or open with PIL
    # For demonstration, let's open with PIL and print some info
    img = Image.open(io.BytesIO(png_bytes))
    print(f"Successfully retrieved image {i} with format: {img.format}, size: {img.size}, mode: {img.mode}")

    # Example: Save the image to a file (optional)
    # img.save(f'{output_path}/image_{i}.png')
    # print(f"Image {i} saved to {output_path}/image_{i}.png")

except ee.EEException as e:
    print(f"Error retrieving image {i}: {e}")

else:
  print("Filtered collection is empty. No images to retrieve.")

img

"""## Colorize Imagery with Gemini API

### Subtask:
Use the Gemini API to colorize the exported grayscale imagery.

**Reasoning**:
Set up the Gemini API, prepare the image data, and send a request to the API to colorize the image.
"""

import os
from google.colab import userdata



# Access your API key from Colab secrets
GOOGLE_API_KEY=userdata.get('GOOGLE_API_KEY')
os.environ['GOOGLE_API_KEY'] = GOOGLE_API_KEY

from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO

client = genai.Client()

prompt = (
    "Restore and colorize this black and white aerial image. Make the landscape realistic for the location which is Mountain View, CA"
)

response = client.models.generate_content(
    model="gemini-2.5-flash-image-preview",
    contents=[prompt, img],
)

for part in response.candidates[0].content.parts:
    if part.text is not None:
        print(part.text)
    elif part.inline_data is not None:
        image = Image.open(BytesIO(part.inline_data.data))
        # image.save("generated_image.png")

image

